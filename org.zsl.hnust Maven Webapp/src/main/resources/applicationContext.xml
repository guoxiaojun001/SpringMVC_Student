<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

<!-- 
<mvc:annotation-driven/>相当于注册了
DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，
配置一些messageconverter。即解决了@Controller注解的使用前提配置。

<context:annotation-config/>是对包进行扫描，实现注释驱动Bean定义，
同时将bean自动注入容器中使用。即解决了@Controller标识的类的bean的注入和使用。
 -->

	<!-- 自动扫描web包 ,将带有注解的类 纳入spring容器管理 -->  
	<context:component-scan base-package="com.cn.hnust" />

	<!-- 引入jdbc配置文件 -->  
	<import resource="classpath:spring-mybatis.xml" />

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" 
		/> -->


	<bean id="aspectBean" class="com.cn.hnust.aop.TestAnnotationAspect" />
	<bean id="aService" class="com.cn.hnust.service.impl.UserServiceImpl"></bean>


	<!-- 用xml配置方式实现aop -->
	<aop:config>
		<aop:aspect id="TestAspect" ref="aspectXml">
			<!--配置com.cn.hnust.service.impl.AdminServiceImpl下getAdminById方法 -->
			<aop:pointcut id="businessService"
				expression="execution(* com.cn.hnust.service.impl.AdminServiceImpl.getAdminById(..))" />
			<aop:before pointcut-ref="businessService" method="doBefore" />
			<aop:after pointcut-ref="businessService" method="doAfter" />
			<aop:around pointcut-ref="businessService" method="doAround" />
			<aop:after-throwing pointcut-ref="businessService"
				method="doThrowing" throwing="ex" />
		</aop:aspect>
	</aop:config>

	<bean id="aspectXml" class="com.cn.hnust.aop.TestAspect" />
	<bean id="adminService" class="com.cn.hnust.service.impl.AdminServiceImpl"></bean>


</beans>  